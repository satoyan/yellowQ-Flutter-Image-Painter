// Mocks generated by Mockito 5.4.5 from annotations
// in image_painter_rotate/test/image_painter_utils_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeImage_0 extends _i1.SmartFake implements _i2.Image {
  _FakeImage_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Image].
///
/// See the documentation for Mockito's code generation for more information.
class MockImage extends _i1.Mock implements _i2.Image {
  MockImage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get width =>
      (super.noSuchMethod(Invocation.getter(#width), returnValue: 0) as int);

  @override
  int get height =>
      (super.noSuchMethod(Invocation.getter(#height), returnValue: 0) as int);

  @override
  bool get debugDisposed =>
      (super.noSuchMethod(Invocation.getter(#debugDisposed), returnValue: false)
          as bool);

  @override
  _i2.ColorSpace get colorSpace =>
      (super.noSuchMethod(
            Invocation.getter(#colorSpace),
            returnValue: _i2.ColorSpace.sRGB,
          )
          as _i2.ColorSpace);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i4.ByteData?> toByteData({
    _i2.ImageByteFormat? format = _i2.ImageByteFormat.rawRgba,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toByteData, [], {#format: format}),
            returnValue: _i3.Future<_i4.ByteData?>.value(),
          )
          as _i3.Future<_i4.ByteData?>);

  @override
  _i2.Image clone() =>
      (super.noSuchMethod(
            Invocation.method(#clone, []),
            returnValue: _FakeImage_0(this, Invocation.method(#clone, [])),
          )
          as _i2.Image);

  @override
  bool isCloneOf(_i2.Image? other) =>
      (super.noSuchMethod(
            Invocation.method(#isCloneOf, [other]),
            returnValue: false,
          )
          as bool);
}
